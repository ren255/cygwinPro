# Logger Library CST (Code Structure Tree)

```
Logger Library/
├── logger.hpp                          # メインAPI
│   ├── include dependencies            # 全ヘッダー統合
│   ├── get_logger()                    # グローバル取得/設定
│   ├── LOG_DEBUG(fmt, ...)             # DEBUGマクロ
│   ├── LOG_INFO(fmt, ...)              # INFOマクロ
│   ├── LOG_WARNING(fmt, ...)           # WARNマクロ
│   └── LOG_ERROR(fmt, ...)             # ERRORマクロ
├── log_type.hpp                        # 型定義
│   ├── enum LogLevel                   # ログレベル
│   │   ├── DEBUG
│   │   ├── INFO
│   │   ├── WARNING
│   │   └── ERROR
│   ├── namespace logger                # メイン名前空間
│   │   ├── struct LogEntry             # ログエントリ
│   │   │   ├── level
│   │   │   ├── filename
│   │   │   ├── line
│   │   │   ├── function
│   │   │   └── message
│   │   └── namespace ColorMap          # カラーマップ
│   │       ├── ANSI_COLORS
│   │       ├── LEVEL_COLORS
│   │       └── RESET
│   └── get_logger()                    # グローバル宣言
├── log_core.hpp                        # コア実装
│   └── namespace logger
│       └── class Logger                # メインクラス
│           ├── current_level           # 現在レベル
│           ├── formatter               # フォーマッタ
│           ├── writer                  # ライター
│           ├── log_internal()          # 内部処理
│           │   ├── level check         
│           │   ├── validate tags       
│           │   ├── format message      
│           │   └── write output        
│           ├── Logger(fmt, wrt)        # パラメータ付きコンストラクタ
│           ├── set_level()             # レベル設定
│           ├── get_level()             # レベル取得
│           ├── debug()                 
│           ├── info()                  
│           ├── warning()               
│           └── error()                 
├── log_utils.hpp                       # ユーティリティ
│   └── namespace logger
│       └── namespace Utils             # ユーティリティ群
│           ├── class ColorHelper       # カラー処理
│           │   ├── get_level_color()   # レベル色取得
│           │   ├── get_reset_color()   # リセット色取得
│           │   ├── parse_color_tags()  # タグ解析
│           │   └── strip_color_tags()  # タグ除去
│           ├── class ValidationUtils   # 検証処理
│           │   ├── check_colors_ct()   # コンパイル時検証
│           │   └── validate_color_tags_runtime() # 実行時検証
│           └── class StringUtils       # 文字列処理
│               ├── extract_filename()  # ファイル名抽出
│               ├── get_level_string()  # レベル文字列
│               └── safe_strcpy()       # 安全コピー
├── log_formatters.hpp                  # フォーマッタ
│   └── namespace logger
│       └── namespace Formatters        # フォーマッタ群
│           ├── class IFormatter        # 基底インターフェース
│           │   └── format()            # 仮想メソッド
│           ├── class ConsoleFormatter  # コンソール用
│           │   ├── color_enabled       # カラー有効
│           │   ├── ConsoleFormatter()  # コンストラクタ
│           │   └── format()
│           └── class PlainFormatter    # プレーン用
│               └── format()
└── log_writers.hpp                     # 出力ライター
    └── namespace logger
        └── namespace Writers           # ライター群
            ├── class IWriter           # 基底インターフェース
            │   └── write()             # 仮想メソッド
            ├── class ConsoleWriter     # コンソール出力
            │   └── write()
            └── class BufferedWriter    # バッファ出力
                ├── BUFFER_SIZE         # バッファサイズ
                ├── buffer              # バッファ領域
                ├── buffer_pos          # バッファ位置
                ├── underlying_writer   # 実際のライター
                ├── BufferedWriter()    # コンストラクタ
                ├── write()             # バッファ書込
                ├── flush()             # バッファフラッシュ
                └── ~BufferedWriter()   # デストラクタ
```

```pu
@startuml Logger Library Class Diagram

' 色分け設定
skinparam classBackgroundColor<<interface>> skyblue
skinparam classBackgroundColor<<abstract>> lightyellow

!theme plain
skinparam packageStyle rectangle
skinparam classAttributeIconSize 0
skinparam classFontSize 10
skinparam packageFontSize 12
skinparam linetype ortho

' Main Logger Package
package "logger" {
    class Logger {
        -LogLevel current_level
        -unique_ptr<IFormatter> formatter
        -unique_ptr<IWriter> writer
        -log_internal(LogLevel level, const char* file, int line, const char* message)
        +Logger(unique_ptr<IFormatter> fmt, unique_ptr<IWriter> wrt)
        +set_level(LogLevel level)
        +get_level() : LogLevel
        +debug(const char* file, int line, const char* fmt, ...)
        +info(const char* file, int line, const char* fmt, ...)
        +warning(const char* file, int line, const char* fmt, ...)
        +error(const char* file, int line, const char* fmt, ...)
    }
}

' Formatters Package
package "logger::Formatters" {
    interface IFormatter <<interface>> {
        +{abstract} format(const LogEntry& entry, char* output, int max_len)
    }

    class ConsoleFormatter {
        -bool color_enabled
        +ConsoleFormatter(bool enable_color)
        +format(const LogEntry& entry, char* output, int max_len)
    }

    class PlainFormatter {
        +format(const LogEntry& entry, char* output, int max_len)
    }
}

' Writers Package
package "logger::Writers" {
    interface IWriter <<interface>> {
        +{abstract} write(const char* message)
    }

    class ConsoleWriter {
        +write(const char* message)
    }

    class BufferedWriter {
        -{static} BUFFER_SIZE : int
        -buffer : char[BUFFER_SIZE]
        -buffer_pos : int
        -underlying_writer : unique_ptr<IWriter>
        +BufferedWriter(unique_ptr<IWriter> writer)
        +write(const char* message)
        +flush()
        +~BufferedWriter()
    }
}

' Utils Package
package "logger::Utils" {
    class ColorHelper <<utility>> {
        +{static} get_level_color(LogLevel level, bool color_enabled) : const char*
        +{static} get_reset_color(bool color_enabled) : const char*
        +{static} parse_color_tags(const char* input, char* output, int max_len, bool color_enabled)
        +{static} strip_color_tags(const char* input, char* output, int max_len)
    }

    class ValidationUtils <<utility>> {
        +{static} check_colors_ct(const char* input) : constexpr bool
        +{static} validate_color_tags_runtime(const char* input) : bool
    }

    class StringUtils <<utility>> {
        +{static} extract_filename(const char* filepath) : const char*
        +{static} get_level_string(LogLevel level) : const char*
        +{static} safe_strcpy(char* dest, const char* src, int max_len)
    }
}

' Types Package
package "gloval Types" {
    enum LogLevel <<enum>> {
        DEBUG
        INFO
        WARNING
        ERROR
    }

    class LogEntry {
        +LogLevel level
        +const char* filename
        +int line
        +const char* function
        +const char* message
    }
    
    package "ColorMap" {
        class ColorMapData <<utility>> {
            +{static} ANSI_COLORS : map<char, const char*>
            +{static} LEVEL_COLORS : map<LogLevel, const char*>
            +{static} RESET : const char*
        }
    }
}

' Global API Package - Updated
package "Global API" {
    class GlobalFunctions <<utility>> {
        +{static} get_logger() : Logger&
        +{note} Returns static Logger instance
        +{note} Uses std::once_flag for thread safety
        +{note} Initializes with ConsoleFormatter and ConsoleWriter
        +{note} Sets default level to INFO
    }

    class LogMacros <<macro>> {
        +LOG_DEBUG(fmt, ...)
        +LOG_INFO(fmt, ...)
        +LOG_WARNING(fmt, ...)
        +LOG_ERROR(fmt, ...)
        +{note} Compile-time color tag validation
        +{note} Uses static_assert for validation
    }
}

' Relationships
Logger ..> LogLevel
Logger *-- IFormatter : composition
Logger *-- IWriter : composition
Logger ..> LogEntry : creates

IFormatter <|.. ConsoleFormatter
IFormatter <|.. PlainFormatter

IWriter <|.. ConsoleWriter
IWriter <|.. BufferedWriter
BufferedWriter *-- IWriter : composition

Logger ..[#blue]> ColorHelper
Logger ..[#blue]> ValidationUtils
Logger ..[#blue]> StringUtils

ConsoleFormatter ..[#blue]> ColorHelper
ConsoleFormatter ..[#blue]> StringUtils
PlainFormatter ..[#blue]> StringUtils

ColorHelper ..> ColorMapData
ValidationUtils ..> ColorMapData

GlobalFunctions ..> Logger : creates
LogMacros ..> GlobalFunctions
LogMacros ..[#blue]> ValidationUtils : validates with

@enduml
```